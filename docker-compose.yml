version: '3'
services:
    nginx:
        container_name: nginx
        restart: always
        build:
            context: ./nginx
            dockerfile: Dockerfile
        volumes:
            - ${APPLICATION}:/var/www
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/conf.d
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        links:
            - php-fpm
            - express-app
        networks:
            - code-network

    php-fpm:
        container_name: php-fpm
        restart: 'always'
        build:
            context: ./php
            args:
                - INSTALL_PDO_MYSQL=${PHP_FPM_INSTALL_PDO_MYSQL}
            dockerfile: Dockerfile
        expose:
            - "9000"    
        volumes:
            - ${APPLICATION}:/var/www
        networks:
            - code-network

    express-app:
        container_name: express-app
        restart: 'always'
        build:
            context: ./express_app
            dockerfile: Dockerfile
        command: ' bash -c "yarn install && yarn build && yarn start" '
        ports:
            - "5000:5000"    
        working_dir: /home/node/app
        volumes:
            - ${APPLICATION}/type_express:/home/node/app
        networks:
            - code-network

    mysql:
        container_name: mysql
        restart: always
        build:
            context: ./mysql
            dockerfile: Dockerfile
        ports:
            - "${MYSQL_PORT}:3306"
        volumes:
            - ${MYSQL_DATA}:/var/lib/mysql
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        networks:
            - code-network

    redis-master:
        container_name: redis-master
        restart: always
        build:
            context: ./redis_master
            dockerfile: Dockerfile
        ports:
            - "${REDIS_MASTER_PORT}:6379"
        volumes:
            - ${REDIS_MASTER_DATA}:/data
        command: redis-server --appendonly yes
        networks:
            - code-network

    composer:
        container_name: composer
        build:
            context: ./composer
            dockerfile: Dockerfile
        volumes:
            - ${APPLICATION}/blog:/app
        command: ["composer", "install"]

networks:
    code-network:
        driver: bridge
